#References for git commands
git whatchanged #shows file list with commit history from newest
git show REVISION:path/to/file > new_file #to get file from particular revision
git reset HEAD^ #discard last commit without losing the changes

#to copy changes from one workspace to another
git diff > patch.txt
git apply patch.txt

#to copy changes between two commits
git diff old_commit_hash new_commit_hash >patch.txt

#keygen creation
ssh-keygen -t rsa -C "your.email@example.com"

#initial setup
git config --global user.name "Mana Venug" 
git config --global user.email mana.venu@example.com 
git config --global color.ui auto

#if rebase need set to be default
git config --global pull.rebase true

#usual steps
git init
git remote add origin <server>
# todebug
git remote show origin
#to change
git remote rename origin ??
#to remove
git remote remove origin ??
#eg
git remote add [remote_name] [url]. #For ex. $ git remote add adhoc-dev git@github.com:adhoc-dev/odoo-infrastructure.git
git pull origin master

#steps to add the file
git add filename
git commit -m "message"
git push origin master

#Set default diffs:
#per branch or master
git config diff.tool tkdiff
git config merge.tool tkdiff
#per linux account
git config --global diff.tool tkdiff
git config --global merge.tool tkdiff

#discard single file changes
git checkout filename
git reset --hard HEAD~1

#show global config list
git config --list

#git branch commands
git remote show origin
git branch -a
git branch -r
git branch
git ls-remote
git ls-remote --heads origin

#to see the modified files
git status

#to see the changes with git repository 
git diff filename with repo path


#pull branch
git fetch origin
git checkout -b feature_branch_name
#check branch
git branch
#update branch
git pull
#push branch
git push -u origin feature_branch_name

#see modified files list onlyu
git ls-files -m

#steps to update the branch and rebase with master
git fetch
git rebase origin/master
(if conflicts)
  modifiy the file and choose which you want
  git add that conflict file name
  git rebase --continue
#should be clean now
