#To sync latest
p4 sync ... #sync in root path to sync all
p4 sync //depot/project/folder/... # to synch particular folder only "..." represnts folder

#steps to push new changes
1. p4 sync ... //make sure to sync latest to avoid conflicts and resolve
2. p4 edit file_path  //apply changes
3. p4 opened // make sure what are the files are opened that will be pushed
4. p4 submit //Enter Description changes, save and push

#to get list of modified files
p4 diff -f -sa

#to view edit mode files
p4 opened ...

#to checkout particular file at particular revision
p4 sync -f file_path#Version             ///make sure no spaces in between

#To print file from particular version
p4 filelog FILENAME
p4 print FILENAME#VERSION

#Command to download files from one-level folder without workspace
for _file in $(p4 files //depot/dir/... | awk '{print $1}' | perl -ne '/(.*)#\d+$/ && print "$1\n"'); do p4 print -q $_file > /path/to/target/dir/$(basename $_file); done

#to resolve conflicts
1. note down "p4 submit -c Commit_ID"
2. p4 resolve
3. a --> Accept files (it will checkin last modified file, replacing changes of VERSION-1)
4. p4 submit -c Commit_ID
5. p4 sync -f affected_file_path#VERSION-1 #to check out file that last changes of VERSION-1
6. p4 edit affected_file_path
7. Apply new changes to VERSION-1
8. p4 submit  ///new VERSION

#to view File's changes
p4 filelog file_path (or)
p4 changes file_path

#diff between same file and two versions
p4 diff file_path#10 file_path#11 #runs in client side, can be used to compare with unsubmitted/local changes
p4 diff2 file_path#10 file_path#11 #runs in server and sends results

#To delete a file
method1:
p4 delete filename
p4 submit

method2:
p4 edit filename
delete file locally
p4 submit

#To rename file
p4 move from_file to_file ### move (or) rename are alias

#to checkout a file
p4 edit filename

#to revert opened files
p4 revert


#to compare directory files are checkedin or not
#p4 unmanaged - . --> '.' current directory

#to remove the changelist
#Steps to discard/resolve with conflicts
#backup all the changes
P4 revert all files in the changelist
p4 sync to latest files
p4 change -d change-number
p4 edit all the files
apply the changes
p4 submit


#To revert the files
p4 revert ... 

#To force sync the files
p4 sync -f ...

#to configure the tkdiff to perforce, run p4 info on any folder
setenv P4CLIENT `p4 info | grep -o 'Client name: .*' | sed 's/Client name: //'`

#To shelve for review
p4 shelve

#To update shelved files, if files modiifed after shelving
p4 shelve -c #changelist -r

#to edit the changelist, either description or the files editing
p4 change -u CL_number

#to add the existing file
p4 reopen -c CLN FILE ...

#list shelves
p4 changes -u <USERNAME> -s shelved  ## can get user name from 'p4 info'

#To commit shelved fils # find changelist from "p4 opened"
p4 shelve -c #changelist -d #deltes the shelve, can revert after this if not required for checkin
p4 submit -c #changelist


## to map new depot to the existing workspace
p4v -> Connection -> Edit Current workspace
==> View workspace mapping as tree, set the path as related to the exisitg tree
After mapped, "p4 sync ..." from the directory set above

To apply the shelved CL to local ws
p4 unshelve -s #changelist
