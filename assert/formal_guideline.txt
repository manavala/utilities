####
///Things to consider for formal

http://www.eetimes.com/document.asp?doc_id=1205241

1. do not over (tight) constraint i.e., 'legal stimulus' so that not all values are exercised, 
so that bugs might be screened, then RTL looks like bug free - Coverage solves this
a != b instead of !(a&b) as a & b shouldn't be one
2. avoid wrong assertions - Debug with Cntr Ex
3. avoid under(no) constraints - Debug with Cntr Ex
4. avoid in-sufficient assertions - Solves with assertion coverage
5. Existing assertion still not powerful - solving is challenging eg like == instead of ===, etc

Advantages:
1. Before the simulation, can find bugs at block level
2. We will more concentrate on spec
3. Properties also attached/included with RTL

Things that Formal Apps takes care (Low Hanging Fruit):
1. Automatic Property Extraction
2. Connectivity
3. Coverage and Unreachability
4. Sequential equivalence checking
5. Register Verification
6. Security paths

For these things make sure of below things:
1. Just write assertions
2. All are seperate tools with different user interface based on its purpose

Cntr Ex:
  state kind of thing, similar to simulation

Can't exactly say. There is no 100 % Verification, but try these things
do something else
check simulation(functional)/emulation/formal

with formal try below things in tool parameter:
1. more time ( as long as different random / seed )
2. more memory
3. different engine
4. reduce complex to simple property
5. reduce complex to simple rtl
6. overconstraints the inputs
7. Divide and Conquer
8. Add cut points / blacj boxes
9. Abstractions/ideas to prog

Doulus //Formal Verification for Non-Specialists

Bug hunting
Assurance, particulary of complex control logic
Checking simple things like RTL linting, connectivity, coverage waivers
Forces you to understand the spec
Post-silicon debug

Simulation/Emulation is for end-to-end ( use cases ==> golden cases )
Formal is for the bug hunting
Specify a assertion/coverpoint to formal to hunt, formal will try to fail that condition as Golden Nuggets
In Simulation, assume acts as assertion
Also Simulation will help to check not overconstrained, best thing to do this is using cover points add what condition need to be tested

run] $ vcf -gui -f selAB.tcl
run] $ cat selAB.tcl
read_file -format sverilog -sva -top selAB -vcs {selAB.sv}
create_clock clk -period 100
sim_run -stable
sim_save_reset
check_fv -block
report_fv
