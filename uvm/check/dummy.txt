Scoreboard
1. inorder to check something, need information
2. scoreboard recvs info from intf UVCs

Functional coverage:
1. If we have constrain random, then we need the functional coverage
2. When we use different types of tests (sequnces) that means we already collecting different types of \
transaction types that we are exercising, still we need functional coverage

Test:
1. Responsible for test intent
2. Responsible for traffic
(Cadence uvm 19 Youtube) 3. from the "test"(cmd line), we can specify the run_phase of sequencer to pickup \
the particular sequence

Configuration happens only from " Top down "
Test -> Testbench -> Envs -> UVCs, etc
Control everything(actve,passve,instance, etc) with "string name" of any type(class, vartibale)

TODO:
always try to do array of anything (class, variables, etc)

Factory - ( no more hard coding)
change anything from anywhere easily - set type override

TODO:
if a variable is put into factory, can be overide with different types(int to array, class handler, ext)?

Phases - for synchronization of UVM components

report:
"_hier" methods must be called after build_phase, since after build_phase only all the objects are generated,\
then can be override

Static 1-time Learning:
1. SV Language basics
2. SV Interface and programs
3. OOP 
4. UVM - Reusable agent
5. UVM - Reusable env
6. UVM - Stimulus generation

Dyanmic Learning from friends :-) :D 
1. RTL Debugging - 
2. System Verilog debugging
3. UVM debugging - Shortern the time

Random:
What are things needs/can be randomized?
1. Transaction objects(header, payload, etc)
2. Configuration objects(num_pkts, num_master, num_slaves)

UVM tests:
1. do compile one time
2. run any test as per the interest with the UVM_TESTNAME command line argument to the simulator

UVM Componebts:
1. To control something before letting it to quit, raise_objection and once done drop_objection. Mostly test required this. Coverage or Scoreboard doesn't need this.
2. From UVM_COMponent extended to virtual base_test
 In that virtual base_test:
  add basic things that needs to inherited/compulsory for other methods
   like config_db, build_phase, pure virtual methods, etc
  Then extend from the base test for pure virtual method definitions, always make sure to register with factory
   Don't worry create "new" object for the virtual calss. since it is registered with the factory  type_id::create:: can get us the object from factory method and returns the handle. Still it can't be instantiated with, cause it is virtual. so what you do is , use "set_type_override" and override the base virtual with extended test, so no problem, since we need extended to pass down for create.
   If it is registered with factory, then only the "settype_override" (uses polymorphism with base_test) can be used to override the base test with new test.

 Analysis port implments the sub-server
 UVM subscriber has "analysis port" and has pure write method
 Whenever this analysis port(server) has got new transactions, that reaches 
their subscribers

3. UVM driver, UVM sequencer, UVM agent are already extended from the UVM component.
##
good thing about the command line instead of the compiling is to save time for the compiling. eg: +UVM_VERBOSITY=???



